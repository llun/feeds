{"title":"Next.JS 13","link":"https://www.llun.me/posts/dev/2022-10-26-nextjs13","date":1666803421000,"content":"<p>Next.JS Conference วันอังคารที่ผ่านมาสิ่งที่ออกมาด้วยคือ <a href=\"https://nextjs.org/blog/next-13\" target=\"_blank\">Next.JS 13</a> มีสองอย่างที่ออกมาน่าสนใจคือ <a href=\"https://nextjs.org/blog/layouts-rfc\" target=\"_blank\">Layout RFC</a> ที่มาเป็น beta ให้สร้าง app directory ได้แล้ว และ bundle ตัวใหม่ที่ชื่อว่า <a href=\"https://vercel.com/blog/turbopack\" target=\"_blank\">Turbopack</a></p>\n<h2>Layout RFC <a href=\"#layout-rfc\" target=\"_blank\">#</a></h2>\n<p>Layout นี่เป็นสิ่งที่ Next.JS ออกมาเพื่อแก้ปัญหาเรื่อง share page structure ที่ปัจจุบัน ท่าที่ทำกันคือเอา structure พวกนั้นไปใส่ไว้ใน file พิเศษที่ชื่อว่า <code>_app.tsx</code> หรือ <code>_document.tsx</code> ซึ่งก็ทำได้ไม่หมดด้วย เพราะมันรองรับแค่ root page</p>\n<p>แต่ Layout ใหม่คือหน้า page ทุกหน้าจะเป็น directory ทั้งหมดและมี Layout file ของตัวเองที่ซ้อนกันได้ ไม่ต้องทำถ้าที่แยกส่วน Layout เป็น component ที่ครอบ page component อีกทีแล้ว</p>\n<h2>App Directory <a href=\"#app-directory\" target=\"_blank\">#</a></h2>\n<p>แต่นอกจาก Layout RFC แล้ว App directory ยังทำอีกอย่างคือแยกระหว่าง server component และ client component ที่แต่ก่อนอยู่รวมกัน แล้วแยกแค่ส่วน load data ไว้ที่ method พิเศษที่ชื่อว่า <code>getStaticProps</code> หรือ <code>getServerSideProps</code> และ effect ทั้งหลายที่ทำงานเฉพาะฝั่ง browser เท่านั้น</p>\n<p>Server component คือแยกไปเลยว่า structure ทั้งหมด render จาก server และทำงานเกี่ยวกับ render และดึงข้อมูลเอามาใส่ structure เท่านั้น ไม่มีส่วน client behaviour ที่อยู่ใน <code>useEffect</code> อีกต่อไป แต่ถ้าจะเอา component บางส่วนมาใช้ฝั่ง client ใน browser ด้วยก็ประกาศไปบนหัวไฟล์ว่า <code>'use client'</code> ข้อดีที่ Next.JS โม้มาคือ JS ไฟล์จะเล็กลง แล้วหน้า page น่าจะโหลดเร็วขึ้น</p>\n<p>นอกจากแยก server component แล้วอีกอย่างที่เปลี่ยนไปคือ server component จะไม่มี <code>getStaticProps</code> หรือ <code>getServerSideProps</code> แล้ว ให้ใช้ <code>fetch</code> <a href=\"https://beta.nextjs.org/docs/data-fetching/fetching\" target=\"_blank\">ที่มี parameter พิเศษไปให้หมด</a></p>\n<p>แต่ถ้าอยากดึงข้อมูลใน client component, React ก็มี hook ใหม่ให้ใช้! เรียกว่า <code>use</code> <a href=\"https://beta.nextjs.org/docs/data-fetching/fetching#example-fetch-and-use-in-client-components\" target=\"_blank\">แบบไม่มีอะไรต่อท้าย</a> ข้อดีที่เห็นคือต่อไปไม่ต้องทำท่า <code>useState</code> แล้วใช้ <code>useEffect</code> เพื่อดึงข้อมูลแล้วจัดใส่ state แล้ว use fetch แล้วเอาตัวแปรมาใช้ตรงๆ ได้เลย</p>\n<h2>Upgrade <a href=\"#upgrade\" target=\"_blank\">#</a></h2>\n<p>หลังจาก Conference เมื่อคืน ก็ลองกับ blog ตัวเองก่อนเลย พบว่าไม่มีอะไรพัง ต้อง run codemod แก้ <a href=\"https://beta.nextjs.org/docs/upgrade-guide/codemods#remove-a-tags-from-link-components-next-link\" target=\"_blank\">link</a> นิดหน่อย แต่ก็ไม่เจอปัญหาอะไร (แต่ถ้าใช้ <a href=\"https://beta.nextjs.org/docs/upgrade-guide/codemods#rename-nextimage-imports-next-image-to-legacy-image\" target=\"_blank\">next/image</a> อาจปวดหัวหน่อย)</p>\n<p>ตอนเช้าเลยมาลองกับ Project ที่ตัวเองดูแลอยู่ ก็ไม่มีอะไรพังอีก ทุกอย่างทำงานได้ปกติดีมาก จนกระทั่งไปดูว่า load เป็นยังไง พบว่า response time เพิ่มขึ้นมาก แถม ram ใช้เยอะเกินกว่าเท่าตัว เรียกว่าพัง แถมพังแบบเงียบๆ ด้วยเพราะไม่มีอะไร error ขึ้นมาเลยแต่ resource ใช้เพิ่มเยอะจนต้อง scale cluster เพิ่ม</p>\n<p>สุดท้ายก็เลย rollback กลับ 12.3 ก่อนแล้วรอ 13 mature กว่านี้ก่อน (อาจจะรอจน app directory หลุด beta) ค่อยลองอีกที</p>\n","author":"Maythee Anegboonlap","siteTitle":"@llun story","siteHash":"91b6624e5872d8d003bc73eb1166cc8f88db58c44e1f8dfb9c7252","entryHash":"1e6f964e85befe7de07c4ff987ba57117f49c239803745b2c60b5a","category":"Me"}